package models

import (
	"fmt"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set UserVoteQuerySet

// UserVoteQuerySet is an queryset type for UserVote
type UserVoteQuerySet struct {
	db *gorm.DB
}

// NewUserVoteQuerySet constructs new UserVoteQuerySet
func NewUserVoteQuerySet(db *gorm.DB) UserVoteQuerySet {
	return UserVoteQuerySet{
		db: db.Model(&UserVote{}),
	}
}

func (qs UserVoteQuerySet) w(db *gorm.DB) UserVoteQuerySet {
	return NewUserVoteQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) All(ret *[]UserVote) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *UserVote) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *UserVote) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) Delete() error {
	return qs.db.Delete(UserVote{}).Error
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) GetUpdater() UserVoteUpdater {
	return NewUserVoteUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) Limit(limit int) UserVoteQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// ObjectIDEq is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) ObjectIDEq(objectID int64) UserVoteQuerySet {
	return qs.w(qs.db.Where("object_id = ?", objectID))
}

// ObjectIDGt is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) ObjectIDGt(objectID int64) UserVoteQuerySet {
	return qs.w(qs.db.Where("object_id > ?", objectID))
}

// ObjectIDGte is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) ObjectIDGte(objectID int64) UserVoteQuerySet {
	return qs.w(qs.db.Where("object_id >= ?", objectID))
}

// ObjectIDIn is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) ObjectIDIn(objectID int64, objectIDRest ...int64) UserVoteQuerySet {
	iArgs := []interface{}{objectID}
	for _, arg := range objectIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("object_id IN (?)", iArgs))
}

// ObjectIDLt is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) ObjectIDLt(objectID int64) UserVoteQuerySet {
	return qs.w(qs.db.Where("object_id < ?", objectID))
}

// ObjectIDLte is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) ObjectIDLte(objectID int64) UserVoteQuerySet {
	return qs.w(qs.db.Where("object_id <= ?", objectID))
}

// ObjectIDNe is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) ObjectIDNe(objectID int64) UserVoteQuerySet {
	return qs.w(qs.db.Where("object_id != ?", objectID))
}

// ObjectIDNotIn is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) ObjectIDNotIn(objectID int64, objectIDRest ...int64) UserVoteQuerySet {
	iArgs := []interface{}{objectID}
	for _, arg := range objectIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("object_id NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserVoteQuerySet) One(ret *UserVote) error {
	return qs.db.First(ret).Error
}

// OrderAscByObjectID is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) OrderAscByObjectID() UserVoteQuerySet {
	return qs.w(qs.db.Order("object_id ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) OrderAscByUserID() UserVoteQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderAscByVote is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) OrderAscByVote() UserVoteQuerySet {
	return qs.w(qs.db.Order("vote ASC"))
}

// OrderDescByObjectID is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) OrderDescByObjectID() UserVoteQuerySet {
	return qs.w(qs.db.Order("object_id DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) OrderDescByUserID() UserVoteQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// OrderDescByVote is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) OrderDescByVote() UserVoteQuerySet {
	return qs.w(qs.db.Order("vote DESC"))
}

// SetObjectID is an autogenerated method
// nolint: dupl
func (u UserVoteUpdater) SetObjectID(objectID int64) UserVoteUpdater {
	u.fields[string(UserVoteDBSchema.ObjectID)] = objectID
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u UserVoteUpdater) SetUserID(userID uint) UserVoteUpdater {
	u.fields[string(UserVoteDBSchema.UserID)] = userID
	return u
}

// SetVote is an autogenerated method
// nolint: dupl
func (u UserVoteUpdater) SetVote(vote int) UserVoteUpdater {
	u.fields[string(UserVoteDBSchema.Vote)] = vote
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserVoteUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) UserIDEq(userID uint) UserVoteQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) UserIDGt(userID uint) UserVoteQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) UserIDGte(userID uint) UserVoteQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) UserIDIn(userID uint, userIDRest ...uint) UserVoteQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id IN (?)", iArgs))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) UserIDLt(userID uint) UserVoteQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) UserIDLte(userID uint) UserVoteQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) UserIDNe(userID uint) UserVoteQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) UserIDNotIn(userID uint, userIDRest ...uint) UserVoteQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", iArgs))
}

// VoteEq is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) VoteEq(vote int) UserVoteQuerySet {
	return qs.w(qs.db.Where("vote = ?", vote))
}

// VoteGt is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) VoteGt(vote int) UserVoteQuerySet {
	return qs.w(qs.db.Where("vote > ?", vote))
}

// VoteGte is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) VoteGte(vote int) UserVoteQuerySet {
	return qs.w(qs.db.Where("vote >= ?", vote))
}

// VoteIn is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) VoteIn(vote int, voteRest ...int) UserVoteQuerySet {
	iArgs := []interface{}{vote}
	for _, arg := range voteRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("vote IN (?)", iArgs))
}

// VoteLt is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) VoteLt(vote int) UserVoteQuerySet {
	return qs.w(qs.db.Where("vote < ?", vote))
}

// VoteLte is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) VoteLte(vote int) UserVoteQuerySet {
	return qs.w(qs.db.Where("vote <= ?", vote))
}

// VoteNe is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) VoteNe(vote int) UserVoteQuerySet {
	return qs.w(qs.db.Where("vote != ?", vote))
}

// VoteNotIn is an autogenerated method
// nolint: dupl
func (qs UserVoteQuerySet) VoteNotIn(vote int, voteRest ...int) UserVoteQuerySet {
	iArgs := []interface{}{vote}
	for _, arg := range voteRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("vote NOT IN (?)", iArgs))
}

// ===== END of query set UserVoteQuerySet

// ===== BEGIN of UserVote modifiers

type userVoteDBSchemaField string

// UserVoteDBSchema stores db field names of UserVote
var UserVoteDBSchema = struct {
	UserID   userVoteDBSchemaField
	ObjectID userVoteDBSchemaField
	Vote     userVoteDBSchemaField
}{

	UserID:   userVoteDBSchemaField("user_id"),
	ObjectID: userVoteDBSchemaField("object_id"),
	Vote:     userVoteDBSchemaField("vote"),
}

// Update updates UserVote fields by primary key
func (o *UserVote) Update(db *gorm.DB, fields ...userVoteDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"user_id":   o.UserID,
		"object_id": o.ObjectID,
		"vote":      o.Vote,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := string(f)
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update UserVote %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserVoteUpdater is an UserVote updates manager
type UserVoteUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserVoteUpdater creates new UserVote updater
func NewUserVoteUpdater(db *gorm.DB) UserVoteUpdater {
	return UserVoteUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&UserVote{}),
	}
}

// ===== END of UserVote modifiers

// ===== END of all query sets
