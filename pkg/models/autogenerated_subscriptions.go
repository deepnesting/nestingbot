package models

import (
	"fmt"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set SubscriptionQuerySet

// SubscriptionQuerySet is an queryset type for Subscription
type SubscriptionQuerySet struct {
	db *gorm.DB
}

// NewSubscriptionQuerySet constructs new SubscriptionQuerySet
func NewSubscriptionQuerySet(db *gorm.DB) SubscriptionQuerySet {
	return SubscriptionQuerySet{
		db: db.Model(&Subscription{}),
	}
}

func (qs SubscriptionQuerySet) w(db *gorm.DB) SubscriptionQuerySet {
	return NewSubscriptionQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) All(ret *[]Subscription) error {
	return qs.db.Find(ret).Error
}

// ChannelIDEq is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) ChannelIDEq(channelID string) SubscriptionQuerySet {
	return qs.w(qs.db.Where("channel_id = ?", channelID))
}

// ChannelIDIn is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) ChannelIDIn(channelID string, channelIDRest ...string) SubscriptionQuerySet {
	iArgs := []interface{}{channelID}
	for _, arg := range channelIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("channel_id IN (?)", iArgs))
}

// ChannelIDNe is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) ChannelIDNe(channelID string) SubscriptionQuerySet {
	return qs.w(qs.db.Where("channel_id != ?", channelID))
}

// ChannelIDNotIn is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) ChannelIDNotIn(channelID string, channelIDRest ...string) SubscriptionQuerySet {
	iArgs := []interface{}{channelID}
	for _, arg := range channelIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("channel_id NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Subscription) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Subscription) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) Delete() error {
	return qs.db.Delete(Subscription{}).Error
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) GetUpdater() SubscriptionUpdater {
	return NewSubscriptionUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) Limit(limit int) SubscriptionQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs SubscriptionQuerySet) One(ret *Subscription) error {
	return qs.db.First(ret).Error
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) OrderAscByUserID() SubscriptionQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) OrderDescByUserID() SubscriptionQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// SetChannelID is an autogenerated method
// nolint: dupl
func (u SubscriptionUpdater) SetChannelID(channelID string) SubscriptionUpdater {
	u.fields[string(SubscriptionDBSchema.ChannelID)] = channelID
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u SubscriptionUpdater) SetUserID(userID int64) SubscriptionUpdater {
	u.fields[string(SubscriptionDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u SubscriptionUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) UserIDEq(userID int64) SubscriptionQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) UserIDGt(userID int64) SubscriptionQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) UserIDGte(userID int64) SubscriptionQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) UserIDIn(userID int64, userIDRest ...int64) SubscriptionQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id IN (?)", iArgs))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) UserIDLt(userID int64) SubscriptionQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) UserIDLte(userID int64) SubscriptionQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) UserIDNe(userID int64) SubscriptionQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs SubscriptionQuerySet) UserIDNotIn(userID int64, userIDRest ...int64) SubscriptionQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", iArgs))
}

// ===== END of query set SubscriptionQuerySet

// ===== BEGIN of Subscription modifiers

type subscriptionDBSchemaField string

// SubscriptionDBSchema stores db field names of Subscription
var SubscriptionDBSchema = struct {
	UserID    subscriptionDBSchemaField
	ChannelID subscriptionDBSchemaField
}{

	UserID:    subscriptionDBSchemaField("user_id"),
	ChannelID: subscriptionDBSchemaField("channel_id"),
}

// Update updates Subscription fields by primary key
func (o *Subscription) Update(db *gorm.DB, fields ...subscriptionDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"user_id":    o.UserID,
		"channel_id": o.ChannelID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := string(f)
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Subscription %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// SubscriptionUpdater is an Subscription updates manager
type SubscriptionUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewSubscriptionUpdater creates new Subscription updater
func NewSubscriptionUpdater(db *gorm.DB) SubscriptionUpdater {
	return SubscriptionUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Subscription{}),
	}
}

// ===== END of Subscription modifiers

// ===== END of all query sets
